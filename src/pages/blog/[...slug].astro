---
import { getCollection, type CollectionEntry, render } from "astro:content";
import PostDetail from "@/components/layout/blog/PostDetail.astro";
import PostListLayout from "@/components/layout/blog/PostListLayout.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  const paths: { params: { slug: string }; props: any }[] = [];
  const categories = new Set<string>();

  // 1. Generate paths for individual posts
  for (const post of posts) {
    paths.push({
      params: { slug: post.id },
      props: { type: "post", entry: post },
    });

    // 2. Discover parent categories from post paths
    const pathParts = post.id.split("/");
    if (pathParts.length > 1) {
      let currentPath = "";
      for (const part of pathParts.slice(0, -1)) {
        currentPath = currentPath ? `${currentPath}/${part}` : part;
        categories.add(currentPath);
      }
    }
  }

  // 3. Generate paths for category pages
  for (const category of categories) {
    paths.push({
      params: { slug: category },
      props: { type: "category", category: category },
    });
  }

  return paths;
}

interface PostProps {
  type: "post";
  entry: CollectionEntry<"blog">;
}

interface CategoryProps {
  type: "category";
  category: string;
}

const props = Astro.props as PostProps | CategoryProps;

// Conditionally fetch posts for category pages
let postsForCategory: CollectionEntry<"blog">[] = [];
if (props.type === "category") {
  const allPosts = await getCollection("blog");
  postsForCategory = allPosts.filter((post) =>
    post.id.startsWith(`${props.category}/`),
  );
}

// Conditionally render post content
const { Content, headings } =
  props.type === "post"
    ? await render(props.entry)
    : { Content: null, headings: [] };
---

<!-- Render based on type -->{
  props.type === "post" && Content && (
    <PostDetail {...props.entry.data} id={props.entry.id} headings={headings}>
      <Content />
    </PostDetail>
  )
}

{
  props.type === "category" && (
    <PostListLayout title={props.category} posts={postsForCategory} />
  )
}
